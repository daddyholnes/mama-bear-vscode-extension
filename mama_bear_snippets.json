{
  "snippets/typescript.json": {
    "Mama Bear React Component": {
      "prefix": "mb-react",
      "body": [
        "import React from 'react';",
        "",
        "interface ${1:ComponentName}Props {",
        "  ${2:// Add props here}",
        "}",
        "",
        "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
        "  ${3:// Destructure props}",
        "}) => {",
        "  return (",
        "    <div>",
        "      ${4:// Component content}",
        "    </div>",
        "  );",
        "};",
        "",
        "export default ${1:ComponentName};"
      ],
      "description": "üêª Mama Bear React functional component template"
    },
    "Mama Bear API Client": {
      "prefix": "mb-api",
      "body": [
        "import axios from 'axios';",
        "",
        "class ${1:ApiService} {",
        "  private baseURL = '${2:https://api.example.com}';",
        "  private client = axios.create({",
        "    baseURL: this.baseURL,",
        "    timeout: 10000,",
        "    headers: {",
        "      'Content-Type': 'application/json',",
        "    },",
        "  });",
        "",
        "  async ${3:getData}(${4:params}: ${5:any}): Promise<${6:any}> {",
        "    try {",
        "      const response = await this.client.get('${7:/endpoint}', {",
        "        params: ${4:params},",
        "      });",
        "      return response.data;",
        "    } catch (error) {",
        "      console.error('üêª API Error:', error);",
        "      throw error;",
        "    }",
        "  }",
        "}",
        "",
        "export const ${8:apiService} = new ${1:ApiService}();"
      ],
      "description": "üêª Mama Bear API service class with error handling"
    },
    "Mama Bear Express Route": {
      "prefix": "mb-route",
      "body": [
        "import { Router, Request, Response } from 'express';",
        "import { body, validationResult } from 'express-validator';",
        "",
        "const router = Router();",
        "",
        "// üêª ${1:Route description}",
        "router.${2:get}('${3:/endpoint}', [",
        "  ${4:// Add validation middleware}",
        "], async (req: Request, res: Response) => {",
        "  try {",
        "    // Validate request",
        "    const errors = validationResult(req);",
        "    if (!errors.isEmpty()) {",
        "      return res.status(400).json({",
        "        success: false,",
        "        errors: errors.array()",
        "      });",
        "    }",
        "",
        "    ${5:// Route logic here}",
        "",
        "    res.json({",
        "      success: true,",
        "      data: ${6:result}",
        "    });",
        "  } catch (error: any) {",
        "    console.error('üêª Route Error:', error);",
        "    res.status(500).json({",
        "      success: false,",
        "      error: error.message",
        "    });",
        "  }",
        "});",
        "",
        "export default router;"
      ],
      "description": "üêª Mama Bear Express.js route with validation"
    },
    "Mama Bear Custom Hook": {
      "prefix": "mb-hook",
      "body": [
        "import { useState, useEffect } from 'react';",
        "",
        "interface Use${1:HookName}Options {",
        "  ${2:// Hook options}",
        "}",
        "",
        "interface Use${1:HookName}Return {",
        "  ${3:data}: ${4:any};",
        "  ${5:loading}: boolean;",
        "  ${6:error}: string | null;",
        "  ${7:refetch}: () => void;",
        "}",
        "",
        "export const use${1:HookName} = (",
        "  ${8:options}: Use${1:HookName}Options",
        "): Use${1:HookName}Return => {",
        "  const [${3:data}, set${3/(.*)/${1:/capitalize}/}] = useState<${4:any}>(null);",
        "  const [${5:loading}, set${5/(.*)/${1:/capitalize}/}] = useState(true);",
        "  const [${6:error}, set${6/(.*)/${1:/capitalize}/}] = useState<string | null>(null);",
        "",
        "  const fetchData = async () => {",
        "    try {",
        "      set${5/(.*)/${1:/capitalize}/}(true);",
        "      set${6/(.*)/${1:/capitalize}/}(null);",
        "      ",
        "      ${9:// Fetch logic here}",
        "      ",
        "      set${3/(.*)/${1:/capitalize}/}(${10:result});",
        "    } catch (err: any) {",
        "      set${6/(.*)/${1:/capitalize}/}(err.message || 'An error occurred');",
        "      console.error('üêª Hook Error:', err);",
        "    } finally {",
        "      set${5/(.*)/${1:/capitalize}/}(false);",
        "    }",
        "  };",
        "",
        "  useEffect(() => {",
        "    fetchData();",
        "  }, [${11:// dependencies}]);",
        "",
        "  return {",
        "    ${3:data},",
        "    ${5:loading},",
        "    ${6:error},",
        "    ${7:refetch}: fetchData,",
        "  };",
        "};"
      ],
      "description": "üêª Mama Bear React custom hook template"
    }
  },

  "snippets/javascript.json": {
    "Mama Bear Async Function": {
      "prefix": "mb-async",
      "body": [
        "/**",
        " * üêª ${1:Function description}",
        " * @param {${2:any}} ${3:param} - ${4:Parameter description}",
        " * @returns {Promise<${5:any}>} ${6:Return description}",
        " */",
        "async function ${7:functionName}(${3:param}) {",
        "  try {",
        "    ${8:// Function logic here}",
        "    ",
        "    return ${9:result};",
        "  } catch (error) {",
        "    console.error('üêª Error in ${7:functionName}:', error);",
        "    throw error;",
        "  }",
        "}"
      ],
      "description": "üêª Mama Bear async function with error handling"
    },
    "Mama Bear Class": {
      "prefix": "mb-class",
      "body": [
        "/**",
        " * üêª ${1:Class description}",
        " */",
        "class ${2:ClassName} {",
        "  /**",
        "   * Creates an instance of ${2:ClassName}",
        "   * @param {${3:any}} ${4:options} - ${5:Constructor options}",
        "   */",
        "  constructor(${4:options}) {",
        "    ${6:// Initialize properties}",
        "  }",
        "",
        "  /**",
        "   * ${7:Method description}",
        "   * @param {${8:any}} ${9:param} - ${10:Parameter description}",
        "   * @returns {${11:any}} ${12:Return description}",
        "   */",
        "  ${13:methodName}(${9:param}) {",
        "    ${14:// Method logic here}",
        "  }",
        "}",
        "",
        "export default ${2:ClassName};"
      ],
      "description": "üêª Mama Bear JavaScript class template"
    },
    "Mama Bear Promise Handler": {
      "prefix": "mb-promise",
      "body": [
        "${1:promiseFunction}(${2:args})",
        "  .then(result => {",
        "    console.log('üêª Success:', result);",
        "    ${3:// Handle success}",
        "  })",
        "  .catch(error => {",
        "    console.error('üêª Error:', error);",
        "    ${4:// Handle error}",
        "  })",
        "  .finally(() => {",
        "    ${5:// Cleanup code}",
        "  });"
      ],
      "description": "üêª Mama Bear Promise chain with logging"
    }
  },

  "snippets/python.json": {
    "Mama Bear Python Class": {
      "prefix": "mb-class",
      "body": [
        "\"\"\"",
        "üêª ${1:Class description}",
        "\"\"\"",
        "",
        "class ${2:ClassName}:",
        "    \"\"\"${3:Class docstring}\"\"\"",
        "    ",
        "    def __init__(self, ${4:*args, **kwargs}):",
        "        \"\"\"",
        "        Initialize ${2:ClassName}",
        "        ",
        "        Args:",
        "            ${5:args: Arguments description}",
        "        \"\"\"",
        "        ${6:# Initialize attributes}",
        "        pass",
        "    ",
        "    def ${7:method_name}(self, ${8:param}):",
        "        \"\"\"",
        "        ${9:Method description}",
        "        ",
        "        Args:",
        "            ${8:param}: ${10:Parameter description}",
        "            ",
        "        Returns:",
        "            ${11:Return type}: ${12:Return description}",
        "        \"\"\"",
        "        try:",
        "            ${13:# Method logic here}",
        "            return ${14:result}",
        "        except Exception as e:",
        "            print(f\"üêª Error in ${7:method_name}: {e}\")",
        "            raise",
        "    ",
        "    def __str__(self):",
        "        \"\"\"String representation\"\"\"",
        "        return f\"${2:ClassName}(${15:attributes})\"",
        "    ",
        "    def __repr__(self):",
        "        \"\"\"Developer representation\"\"\"",
        "        return self.__str__()"
      ],
      "description": "üêª Mama Bear Python class with documentation"
    },
    "Mama Bear API Client": {
      "prefix": "mb-api",
      "body": [
        "\"\"\"",
        "üêª ${1:API Client description}",
        "\"\"\"",
        "",
        "import requests",
        "from typing import Dict, Any, Optional",
        "import logging",
        "",
        "logger = logging.getLogger(__name__)",
        "",
        "class ${2:ApiClient}:",
        "    \"\"\"${3:API Client for interacting with external service}\"\"\"",
        "    ",
        "    def __init__(self, base_url: str, api_key: Optional[str] = None):",
        "        \"\"\"",
        "        Initialize API client",
        "        ",
        "        Args:",
        "            base_url: Base URL for the API",
        "            api_key: Optional API key for authentication",
        "        \"\"\"",
        "        self.base_url = base_url.rstrip('/')",
        "        self.session = requests.Session()",
        "        ",
        "        if api_key:",
        "            self.session.headers.update({",
        "                'Authorization': f'Bearer {api_key}',",
        "                'Content-Type': 'application/json'",
        "            })",
        "    ",
        "    def ${4:get_data}(self, ${5:endpoint}: str, **kwargs) -> Dict[str, Any]:",
        "        \"\"\"",
        "        ${6:Get data from API endpoint}",
        "        ",
        "        Args:",
        "            ${5:endpoint}: API endpoint",
        "            **kwargs: Additional request parameters",
        "            ",
        "        Returns:",
        "            Dict containing API response",
        "            ",
        "        Raises:",
        "            requests.RequestException: If API request fails",
        "        \"\"\"",
        "        try:",
        "            url = f\"{self.base_url}/{${5:endpoint}.lstrip('/')}\"",
        "            response = self.session.get(url, **kwargs)",
        "            response.raise_for_status()",
        "            ",
        "            return response.json()",
        "            ",
        "        except requests.RequestException as e:",
        "            logger.error(f\"üêª API request failed: {e}\")",
        "            raise",
        "    ",
        "    def __enter__(self):",
        "        \"\"\"Context manager entry\"\"\"",
        "        return self",
        "    ",
        "    def __exit__(self, exc_type, exc_val, exc_tb):",
        "        \"\"\"Context manager exit\"\"\"",
        "        self.session.close()"
      ],
      "description": "üêª Mama Bear Python API client with context manager"
    },
    "Mama Bear Decorator": {
      "prefix": "mb-decorator",
      "body": [
        "\"\"\"",
        "üêª ${1:Decorator description}",
        "\"\"\"",
        "",
        "from functools import wraps",
        "from typing import Callable, Any",
        "import time",
        "import logging",
        "",
        "logger = logging.getLogger(__name__)",
        "",
        "def ${2:decorator_name}(${3:*args, **kwargs}):",
        "    \"\"\"",
        "    ${4:Decorator docstring}",
        "    ",
        "    Args:",
        "        ${5:args: Decorator arguments}",
        "    \"\"\"",
        "    def decorator(func: Callable) -> Callable:",
        "        @wraps(func)",
        "        def wrapper(*args, **kwargs) -> Any:",
        "            start_time = time.time()",
        "            ",
        "            try:",
        "                logger.info(f\"üêª Calling {func.__name__}\")",
        "                ${6:# Pre-execution logic}",
        "                ",
        "                result = func(*args, **kwargs)",
        "                ",
        "                ${7:# Post-execution logic}",
        "                execution_time = time.time() - start_time",
        "                logger.info(f\"üêª {func.__name__} completed in {execution_time:.3f}s\")",
        "                ",
        "                return result",
        "                ",
        "            except Exception as e:",
        "                logger.error(f\"üêª Error in {func.__name__}: {e}\")",
        "                ${8:# Error handling logic}",
        "                raise",
        "        ",
        "        return wrapper",
        "    return decorator"
      ],
      "description": "üêª Mama Bear Python decorator with logging"
    }
  }
}